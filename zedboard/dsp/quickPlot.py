#!/usr/bin/env python3

'''
plot a output.txt file generated by testbench

format:

    adc_ref, mixout
    -5821,           0, -16360,      0
    ...

columns are alternating i, q values
'''
from numpy import *
from numpy.fft import fftshift
from matplotlib.pyplot import *
from scipy.signal import periodogram
import argparse


def plot_td(dat1, ax, ts=8e-9, lbl='', **kwargs):
    dat0 = linspace(0, len(dat1) * ts, len(dat1))  # time [s]
    ax.plot(dat0 / 1000, real(dat1), label=lbl + "_I", **kwargs)
    ax.plot(dat0 / 1000, imag(dat1), label=lbl + "_Q", **kwargs)
    ax.set_xlabel("Time [us]")
    ax.set_ylabel('val')
    ax.legend(loc='upper right')


def plot_spect(dat1, ax, ts=8e-9, **kwargs):
    f_dat, mag_dat = periodogram(
        dat1,
        1 / ts,
        'flattop',
        return_onesided=False,
        detrend=False
    )
    f_dat = fftshift(f_dat)
    mag_dat = fftshift(mag_dat)
    ax.plot(f_dat / 1e6, 20 * log10(mag_dat), **kwargs)
    ax.set_xlabel("Frequency [MHz]")
    ax.set_ylabel("Magnitude [dB]")


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "fname", help="File to plot"
    )
    parser.add_argument(
        "--ts", help="Sample rate in [ns]",
        default=8, type=float
    )
    parser.add_argument(
        "--skip", help="Skip N samples at beginning",
        default=0, type=int
    )
    args = parser.parse_args()

    with open(args.fname) as f:
        dat_names = f.readline().strip().split(',')
    print(dat_names)
    dat = genfromtxt("./output.txt", delimiter=',', skip_header=1)
    dat = dat[args.skip:, 0::2] + 1j * dat[args.skip:, 1::2]

    rcParams['axes.grid'] = True
    fig, axs = subplots(dat.shape[1], 1, sharex=True)
    for n, d, a in zip(dat_names, dat.T, axs):
        plot_td(d, a, args.ts, lbl=n)
    fig.tight_layout()

    fig, ax = subplots(1, 1)
    for n, d in zip(dat_names, dat.T):
        plot_spect(d, ax, args.ts, label=n)
    ax.legend(loc='upper right')
    fig.tight_layout()

    show()


if __name__ == '__main__':
    main()
